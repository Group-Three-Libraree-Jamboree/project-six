{"version":3,"sources":["components/firebase.js","components/Header.js","components/Calendar.js","components/Footer.js","App.js","components/DisplayMoney.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","Calendar","state","startDate","Date","handleChange","date","setState","storeDate","passDate","toString","slice","replace","props","getCalenderDate","this","selected","onChange","React","Component","Footer","App","saveToDb","dbRef","database","ref","paycheck","savings","days","dataToStoreInFb","user","total","daysToNextCheck","income","calendarDate","deposited","amountToSave","push","passedDate","handleUserInput","event","console","log","target","value","name","calcTotal","e","preventDefault","dailyExpenses","calcDailyBudget","dailybudget","afterSaving","className","onSubmit","htmlFor","type","id","required","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a80b331e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyAFZe3GsqX7FKN8wgInodZi2hxUhMQgyF0',\n\tauthDomain: 'project-six-group-three.firebaseapp.com',\n\tdatabaseURL: 'https://project-six-group-three.firebaseio.com',\n\tprojectId: 'project-six-group-three',\n\tstorageBucket: 'project-six-group-three.appspot.com',\n\tmessagingSenderId: '136712194355',\n\tappId: '1:136712194355:web:d64e186c3ca40900601646',\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;\n","import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<h1>Daily Budget Calculator</h1>\n\t\t\t<p>Helping you save for a rainy day.</p>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n// CSS Modules, react-datepicker-cssmodules.css\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nclass Calendar extends React.Component {\n\tstate = {\n\t\tstartDate: new Date(),\n\t};\n\n\thandleChange = (date) => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tstartDate: date,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.storeDate();\n\t\t\t}\n\t\t);\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.storeDate();\n\t}\n\n\t// This function grabs the date picked by the user. Changes that value from an Object to a string, slices it, then passed it back to the parent\n\tstoreDate = (passDate) => {\n\t\tconst dayOfTrans = this.state.startDate;\n\t\tconst makeString = dayOfTrans.toString();\n\t\tconst sliceDate = makeString.slice(0, 15);\n\t\t// console.log(sliceDate);\n\t\tpassDate = sliceDate.replace(/\\s/g, '-');\n\t\tthis.props.getCalenderDate(passDate);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<label>Pick a date:</label>\n\t\t\t\t<DatePicker\n\t\t\t\t\tselected={this.state.startDate}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Calendar;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>Made by Heather, Nikita, Tiffany, and Dustin</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport firebase from './components/firebase';\nimport Header from './components/Header';\nimport Calendar from './components/Calendar';\nimport Expenses from './components/Expenses';\nimport Footer from './components/Footer';\nimport './App.scss';\nimport DisplayMoney from './components/DisplayMoney';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tpaycheck: 0,\n\t\t\tsavings: 0,\n\t\t\tdays: 0,\n\t\t\tdailybudget: 0,\n\t\t\ttotal: 0,\n\t\t\tafterSaving: 0,\n\t\t\tdailyExpenses: 0,\n\t\t\tcalendarDate: '',\n\t\t};\n\t}\n\n\t// This function creates an object to save the firebase based on state.\n\tsaveToDb = () => {\n\t\tconst dbRef = firebase.database().ref();\n\t\tconst { paycheck, savings, days, total } = this.state;\n\t\tconst dataToStoreInFb = {\n\t\t\tuser: {\n\t\t\t\ttotal: total,\n\t\t\t\tdaysToNextCheck: days,\n\t\t\t\tincome: {\n\t\t\t\t\t[this.state.calendarDate]: {\n\t\t\t\t\t\tdate: this.state.calendarDate,\n\t\t\t\t\t\tpaycheck: paycheck,\n\t\t\t\t\t\tdeposited: true,\n\t\t\t\t\t\tamountToSave: savings,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tdbRef.push(dataToStoreInFb);\n\t};\n\n\t// grabs calender date from the calender component and adds it to state\n\tgetCalenderDate = (passedDate) => {\n\t\tthis.setState({\n\t\t\tcalendarDate: passedDate,\n\t\t});\n\t};\n\n\tcomponentDidMount() {\n\t\tconst dbRef = firebase.database().ref();\n\t\t// this.testingFirebase();\n\t}\n\n\t// testingFirebase = () => {\n\t// \tconst dbRefOne = firebase\n\t// \t\t.database()\n\t// \t\t.ref('/-M6m99gw-ggOacJN-qEO/user/income/Thu-May-07-2020');\n\t// \tdbRefOne.on('value', (result) => {\n\t// \t\tconsole.log(result.val());\n\t// \t});\n\n\t// \tdbRefOne.update({ paycheck: \"45\" });\n\t// };\n\n\t// this function grabs all input values from app.js and adds it to state\n\thandleUserInput = (event) => {\n\t\tconsole.log(event.target.value);\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value,\n\t\t});\n\t};\n\n\tcalcTotal = (e) => {\n\t\te.preventDefault();\n\t\tconst total =\n\t\t\tthis.state.paycheck - this.state.savings - this.state.dailyExpenses;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\ttotal: total,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.calcDailyBudget();\n\t\t\t}\n\t\t);\n\t};\n\n\tcalcDailyBudget = () => {\n\t\tconst dailybudget = this.state.total / this.state.days;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tdailybudget: dailybudget,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.saveToDb();\n\t\t\t}\n\t\t);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t{/* You need to install Calendar in iTerm: npm install react-datepicker --save */}\n\n\t\t\t\t<main>\n\t\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t\t<div className=\"half\">\n\t\t\t\t\t\t\t<form className=\"paymentSubmit\" onSubmit={this.calcTotal}>\n\t\t\t\t\t\t\t\t<Calendar getCalenderDate={this.getCalenderDate} />\n\t\t\t\t\t\t\t\t<label htmlFor=\"paycheck\">How much is your paycheck?</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tid=\"paycheck\"\n\t\t\t\t\t\t\t\t\tname=\"paycheck\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t<label htmlFor=\"days\">Days until next pay period?</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tid=\"days\"\n\t\t\t\t\t\t\t\t\tname=\"days\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t<label htmlFor=\"savings\">How much are you saving?</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tid=\"savings\"\n\t\t\t\t\t\t\t\t\tname=\"savings\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t<label htmlFor=\"dailyExpenses\">Enter Daily Expenses:</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tid=\"dailyExpenses\"\n\t\t\t\t\t\t\t\t\tname=\"dailyExpenses\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t<button className=\"nextButton\" type=\"submit\">\n\t\t\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"half\">\n\t\t\t\t\t\t\t<p className=\"dailyInfo\">\n\t\t\t\t\t\t\t\tYour daily budget is:<span> ${(this.state.dailybudget).toFixed(2)}</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t{/* <DisplayMoney /> */}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","import React, { Component } from 'react';\nimport firebase from 'firebase';\n\nclass DisplayMoney extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tuserMoney: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst dbRef = firebase.database().ref();\n\t\tdbRef.on('value', (result) => {\n\t\t\tconst data = result.val();\n\t\t\tconst userMoney = [];\n\t\t\tfor (let key in data) {\n\t\t\t\tuserMoney.push(data[key]);\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tuserMoney: userMoney,\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.userMoney.map((money, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t<h2>You currently have {money.user.total}</h2>\n\t\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\t\tYou have {money.user.daysToNextCheck} days till your next\n\t\t\t\t\t\t\t\tpaycheck\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\tYou were paid {money.user.income['Thu-May-07-2020'].paycheck} on{' '}\n\t\t\t\t\t\t\t\t{money.user.income['Thu-May-07-2020'].date}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DisplayMoney;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}